"use client"

import { useState, useEffect, useCallback } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { CheckCircle, ExternalLink, Music, AlertCircle, Loader2 } from "lucide-react"
import { spotifyClient } from "@/lib/spotify-client-enhanced" // Use the enhanced client
import type { Song } from "@/lib/database"
import type { SpotifyPlaylist } from "@/lib/spotify-client-enhanced"

interface PlaylistCreatorProps {
  songs: Song[]
  birthYear: number
  formativeYears: string
  onClose?: () => void
}

export function PlaylistCreator({ songs, birthYear, formativeYears, onClose }: PlaylistCreatorProps) {
  const [playlistName, setPlaylistName] = useState(`Playlist Time Machine (${formativeYears})`)
  const [description, setDescription] = useState(
    `My personalized time machine playlist featuring Billboard #1 hits from ${formativeYears}. Generated by Playlist Time Machine.`,
  )
  const [isCreating, setIsCreating] = useState(false)
  const [createdPlaylist, setCreatedPlaylist] = useState<SpotifyPlaylist | null>(null)
  const [error, setError] = useState<string | null>(null)
  const [progress, setProgress] = useState({ current: 0, total: 0, status: "" })
  const [isAuthenticated, setIsAuthenticated] = useState(spotifyClient.isAuthenticated())
  const [authError, setAuthError] = useState<string | null>(null)

  const updateAuthState = useCallback(() => {
    console.log("PlaylistCreator: Updating auth state")
    setIsAuthenticated(spotifyClient.isAuthenticated())
  }, [])

  useEffect(() => {
    const updateAuthState = () => {
      console.log("PlaylistCreator: Auth state updated by listener.")
      setIsAuthenticated(spotifyClient.isAuthenticated())
    }

    spotifyClient.addAuthListener(updateAuthState)
    // Initial check
    updateAuthState()

    const handleAuthError = (event: Event) => {
      const customEvent = event as CustomEvent
      setAuthError(customEvent.detail?.error || "Authentication failed.")
      setIsAuthenticated(false) // Ensure UI reflects non-auth state
    }
    window.addEventListener("spotify-auth-error", handleAuthError)

    return () => {
      spotifyClient.removeAuthListener(updateAuthState)
      window.removeEventListener("spotify-auth-error", handleAuthError)
    }
  }, []) // Removed updateAuthState from dependency array as it's stable

  const handleConnectToSpotify = async () => {
    setAuthError(null) // Clear previous auth errors
    try {
      await spotifyClient.startAuthFlow()
      // The page will redirect to Spotify. If it doesn't, an error might have occurred.
      // No need to set loading state here as the page will navigate away.
    } catch (err) {
      console.error("PlaylistCreator: Error starting auth flow", err)
      setAuthError(err instanceof Error ? err.message : "Failed to start Spotify authentication.")
    }
  }

  if (!isAuthenticated) {
    return (
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center pb-4">
          <CardTitle className="flex items-center justify-center gap-2">
            <Music className="h-5 w-5" />
            Connect to Spotify
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4 text-center">
          <p className="text-gray-600 dark:text-gray-400">
            To create your Playlist Time Machine, please connect your Spotify account.
          </p>
          {authError && (
            <div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg text-sm text-red-700 dark:text-red-200">
              <AlertCircle className="inline h-4 w-4 mr-1" /> {authError}
            </div>
          )}
          <div className="flex gap-2">
            <Button onClick={handleConnectToSpotify} className="flex-1 bg-green-500 hover:bg-green-600">
              Connect to Spotify
            </Button>
            <Button onClick={onClose} variant="outline" className="flex-1">
              Cancel
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  const createPlaylistOnSpotify = async () => {
    setIsCreating(true)
    setError(null)
    setAuthError(null)
    setProgress({ current: 0, total: songs.length + 2, status: "Preparing..." })

    try {
      const userData = await spotifyClient.getCurrentUser()
      setProgress((prev) => ({ ...prev, status: "Fetching user info..." }))
      const userId = userData.id
      setProgress((prev) => ({ ...prev, current: 1, status: "Searching for tracks..." }))

      const trackUris: string[] = []
      const notFound: string[] = []

      for (let i = 0; i < songs.length; i++) {
        const song = songs[i]
        setProgress({
          current: 1 + i + 1, // +1 for user info, +1 because loop is 0-indexed
          total: songs.length + 2, // +1 for user info, +1 for playlist creation itself
          status: `Finding "${song.title.substring(0, 20)}..." by ${song.artist.substring(0, 15)}...`,
        })

        try {
          const searchResults = await spotifyClient.searchTracks(`track:"${song.title}" artist:"${song.artist}"`, 1)
          if (searchResults.length > 0 && searchResults[0].uri) {
            trackUris.push(searchResults[0].uri)
          } else {
            // Try a broader search
            const broaderResults = await spotifyClient.searchTracks(`${song.title} ${song.artist}`, 1)
            if (broaderResults.length > 0 && broaderResults[0].uri) {
              trackUris.push(broaderResults[0].uri)
            } else {
              notFound.push(`${song.title} by ${song.artist}`)
            }
          }
        } catch (searchErr) {
          console.error(`Error searching for ${song.title}:`, searchErr)
          notFound.push(`${song.title} by ${song.artist} (search error)`)
        }
        await new Promise((resolve) => setTimeout(resolve, 50)) // Small delay for API rate limits & UI updates
      }

      setProgress((prev) => ({ ...prev, current: songs.length + 1, status: "Creating playlist..." }))
      const newPlaylist = await spotifyClient.createPlaylist(userId, playlistName, description, trackUris)
      setProgress((prev) => ({ ...prev, current: songs.length + 2, status: "Playlist created!" }))
      setCreatedPlaylist(newPlaylist)

      if (notFound.length > 0) {
        setError(
          `Playlist created! ${trackUris.length} songs added. ${notFound.length} song(s) couldn't be found: ${notFound.slice(0, 2).join(", ")}${notFound.length > 2 ? "..." : ""}`,
        )
      }
    } catch (err) {
      console.error("Error creating playlist:", err)
      if (
        err instanceof Error &&
        (err.message.includes("Authentication required") || err.message.includes("token expired"))
      ) {
        setError("Your Spotify session may have expired. Please try connecting again.")
        setIsAuthenticated(false) // Trigger re-auth
        spotifyClient.logout() // Clear potentially stale tokens
      } else {
        setError(err instanceof Error ? err.message : "Failed to create playlist. Please try again.")
      }
    } finally {
      setIsCreating(false)
    }
  }

  if (createdPlaylist) {
    return (
      <Card className="w-full max-w-md mx-auto">
        <CardHeader className="text-center pb-4">
          <CardTitle className="flex items-center justify-center gap-2 text-green-600">
            <CheckCircle className="h-5 w-5" />
            Playlist Created!
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="text-center">
            <p className="font-medium">{createdPlaylist.name}</p>
            <p className="text-sm text-gray-600 dark:text-gray-400">Successfully added to your Spotify library.</p>
          </div>
          {error && ( // Show "not found" errors here as warnings
            <div className="p-3 bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg">
              <div className="flex items-start gap-2">
                <AlertCircle className="h-4 w-4 text-yellow-600 dark:text-yellow-400 mt-0.5 flex-shrink-0" />
                <p className="text-sm text-yellow-800 dark:text-yellow-200">{error}</p>
              </div>
            </div>
          )}
          <div className="flex gap-2">
            <Button
              onClick={() => window.open(createdPlaylist.external_urls.spotify, "_blank")}
              className="flex-1 bg-green-500 hover:bg-green-600"
            >
              <ExternalLink className="h-4 w-4 mr-2" />
              Open in Spotify
            </Button>
            <Button onClick={onClose} variant="outline" className="flex-1">
              Close
            </Button>
          </div>
        </CardContent>
      </Card>
    )
  }

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle className="flex items-center gap-2">
          <Music className="h-5 w-5" />
          Create Spotify Playlist
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div>
          <Label htmlFor="playlistName">Playlist Name</Label>
          <Input
            id="playlistName"
            value={playlistName}
            onChange={(e) => setPlaylistName(e.target.value)}
            placeholder="Enter playlist name"
            disabled={isCreating}
          />
        </div>
        <div>
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            value={description}
            onChange={(e) => setDescription(e.target.value)}
            placeholder="Enter playlist description"
            rows={3}
            disabled={isCreating}
          />
        </div>
        <p className="text-sm text-gray-600 dark:text-gray-400">
          This will create a playlist with {songs.length} songs.
        </p>
        {isCreating && (
          <div className="space-y-2">
            <div className="flex items-center justify-between text-sm">
              <span>{progress.status}</span>
              <span>
                {progress.current}/{progress.total}
              </span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2.5">
              <div
                className="bg-green-500 h-2.5 rounded-full transition-all duration-300"
                style={{ width: `${(progress.current / progress.total) * 100}%` }}
              />
            </div>
          </div>
        )}
        {error &&
          !createdPlaylist && ( // Show critical errors here
            <div className="p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg text-sm text-red-700 dark:text-red-200">
              <AlertCircle className="inline h-4 w-4 mr-1" /> {error}
            </div>
          )}
        <div className="flex gap-2">
          <Button onClick={createPlaylistOnSpotify} disabled={isCreating || !playlistName.trim()} className="flex-1">
            {isCreating ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Creating...
              </>
            ) : (
              "Create Playlist"
            )}
          </Button>
          <Button onClick={onClose} variant="outline" className="flex-1" disabled={isCreating}>
            Cancel
          </Button>
        </div>
      </CardContent>
    </Card>
  )
}
